P16 assembler v1.5 (Feb  9 2024)	c:\Users\gonca\OneDrive\Documentos\Licenciatura\Arquitetura_de_Computadores\SV_23_24\labs\ComputerArchProj\AssemblyExerc\Input.lst	Thu Mar 14 22:52:33 2024

Sections
Index   Name            Address   Size
0       .startup        0000      0012 18
1       .text           0012      0052 82
2       .data           0064      0000 0
3       .stack          0064      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      .startup
abs                     LABEL     0050 80     .text
abs_endif               LABEL     0058 88     .text
idxofmax_endif          LABEL     003C 60     .text
idxofmax_whilebody      LABEL     0030 48     .text
idxofmax_whilecond      LABEL     003E 62     .text
indexof_max             LABEL     0016 22     .text
line#15                 LABEL     000C 12     .startup
line#9                  LABEL     0002 2      .startup
main                    LABEL     0012 18     .text
main_addr               LABEL     0010 16     .startup
resto                   LABEL     005A 90     .text
resto_end               LABEL     0062 98     .text
STACK_SIZE              ABSOLUTE  00A4 164    .data
stack_top               LABEL     00A4 164    .stack
stack_top_addr          LABEL     000E 14     .startup
UINT16_MIN              ABSOLUTE  0000 0      .startup

Code listing
   1           	/* Secção de arranque: código de inicialização
   2           	 * 1. Estabelece vetores (entry point após reset e de interrupção)
   3           	 * 2. Inicia stack pointer
   4           	 * 3. Chama main
   5           	 * 4. Retém a execução do CPU após o retorno do main
   6           	 */
   7           		.section .startup
   8 0000 01 58		b		_start
   9 0002 FF 5B		b 		.
  10           	_start:
  11 0004 4D 0C		ldr		sp, stack_top_addr
  12 0006 80 B7		mov		r0, pc
  13 0008 0E A2		add		lr, r0, #4
  14 000A 2F 0C		ldr		pc, main_addr
  15 000C FF 5B		b 		.	
  16           	stack_top_addr:
  17 000E A4 00		.word stack_top
  18           	main_addr:
  19 0010 12 00		.word	main
  20           		
  21           	    ;-----------------------------------------------
  22           	    ; Constantes
  23           	    ;-----------------------------------------------
  24          	    .equ UINT16_MIN, 0      ; 0x0000 
  25           	
  26           	
  27           	/* Secção com código aplicacional (programa)
  28           	 */
  29           		.text
  30           	main:
  31           		; salva LR se função não folha
  32 0012 0E 24		push	lr
  33           	
  34           		; retorna desempilhando endereço de retorno se função não folha	(pop	pc)
  35           	
  36           		; retorna transferindo LR para PC se função folha
  37 0014 0F B7		mov		pc, lr
  38           	
  39           	; In: R0 = a, R1 = n
  40           	; Out: R0 = indíce do maior absoluto
  41           	indexof_max:
  42           	    ; prólogo
  43 0016 0E 24	    push lr
  44 0018 04 24	    push r4 ; a
  45 001A 05 24	    push r5 ; val
  46 001C 06 24	    push r6 ; idx
  47 001E 07 24	    push r7 ; i
  48 0020 08 24	    push r8 ; n
  49           	
  50           	    ; iniciação de variáveis locais
  51 0022 04 B0	    mov r4, r0                  ; R4=a
  52 0024 98 E0	    lsl r8, r1, #1              ; R8=n
  53 0026 06 60	    mov r6, #0                  ; R6=idx
  54 0028 07 60	    mov r7, #0                  ; R7=i
  55 002A 05 60	    mov r5, #UINT16_MIN & 0xFF  ; R5=val
  56 002C 05 70	    movt r5, #UINT16_MIN >> 8   ;
  57           	
  58           	    ; corpo da função
  59 002E 07 58	    b idxofmax_whilecond
  60           	
  61           	idxofmax_whilebody:
  62 0030 C0 13	    ldr r0, [r4, r7]
  63 0032 0E 5C	    bl abs
  64 0034 50 B8	    cmp r5, r0
  65 0036 02 48	    bhs idxofmax_endif
  66 0038 05 B0	    mov r5, r0
  67 003A 86 B3	    mov r6, r7
  68           	idxofmax_endif:
  69 003C 77 A1	    add r7, r7, #2
  70           	idxofmax_whilecond:
  71 003E 70 BC	    cmp r7, r8
  72 0040 F7 4F	    blo idxofmax_whilebody
  73           	    ; epílogo e retorno
  74 0042 E0 E8	    lsr r0, r6, #1
  75 0044 08 04	    pop r8
  76 0046 07 04	    pop r7
  77 0048 06 04	    pop r6
  78 004A 05 04	    pop r5
  79 004C 04 04	    pop r4
  80 004E 0F 04	    pop pc
  81           	
  82           	; In: R0=v
  83           	; Out: R0=abs(v)
  84           	abs:
  85 0050 01 60	    mov r1, #0
  86 0052 80 B8	    cmp r0, r1
  87 0054 01 50	    bge abs_endif
  88 0056 10 88	    sub r0, r1, r0
  89           	abs_endif:
  90 0058 0F B7	    mov pc, lr
  91           	
  92           	/*
  93           	INPUT: R0, R1
  94           	OUTPUT: R0
  95           	R0 % R1 = R0
  96           	*/
  97           	resto:
  98 005A 80 B8		cmp r0, r1 
  99 005C 02 48		bhs resto_end 
 100 005E 80 88		sub r0, r0, r1
 101 0060 FC 5B		b	resto
 102           	resto_end:
 103 0062 0F B7		mov pc, lr 
 104           	
 105           	/* Dados globais do programa iniciados
 106           	 */ 
 107           		.data
 108           	
 109           	/* Stack: pilha com dados temporários
 110           	 */
 111          		.equ STACK_SIZE, 64
 112           		.section .stack
 113 0064 00   		.space STACK_SIZE
 113 .... ..
 113 00A3 00
 114           	stack_top:
 114           	
