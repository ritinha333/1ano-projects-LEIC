P16 assembler v1.5 (Feb  9 2024)	c:\Users\ritam\OneDrive\Ambiente de Trabalho\LEIC 2 ANO\2semestre\AC\labs_code\lab01_opt.lst	Wed Mar 06 12:27:19 2024

Sections
Index   Name            Address   Size
0       .text           0000      0024 36

Symbols
Name                    Type      Value       Section
if                      LABEL     0004 4      .text
if_end                  LABEL     0022 34     .text
line#57                 LABEL     0022 34     .text
while                   LABEL     0016 22     .text
while_end               LABEL     0022 34     .text

Code listing
   1           	; -----------------------------------------------------------------------------
   2           	; Ficheiro:  lab01.S
   3           	; Descricao: Codigo de suporte a realizacao da 1a atividade laboratorial de AC.
   4           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   5           	; Data:      11-03-2022
   6           	; -----------------------------------------------------------------------------
   7           	
   8           		; r0 guarda o valor da variavel M
   9           		; r1 guarda o valor da variavel m
  10           		; r2 guarda o valor da variavel p
  11           		; r3 e utilizado para guardar valores temporariamente
  12           	
  13           	;	mov r2, #0		;p = 0
  14           	;	mov r3, #0		; aux = 0
  15           	;if:
  16           	;	cmp r3, r0		; aux - M	Em vez de estar a gastar mais registos poderíamos fazer AND r0, r0, r0 para não gastar mais registos
  17           	;	beq if_end			; if (M == 0), logo flag Z = 1 ele salta para o final do programa 
  18           	;
  19           	;while:
  20           	;	cmp r3, r1
  21           	;	bhs while_end
  22           	;	add r2, r2, r0
  23           	;	sub r1, r1, #1
  24           	;	b while
  25           	;while_end:
  26           	;
  27           	;if_end:
  28           	;	b 	.	;branch para ele próprio de forma a terminar o programa, o ponto final é um offset que anda sempre a saltar para ele próprio
  29           	;
  30           	
  31           	; second version (otimizada)
  32           	
  33 0000 02 60		mov r2, #0		;p = 0
  34 0002 03 60		mov r3, #0		; aux = 0
  35           	
  36           	if:
  37 0004 80 B9		cmp r0, r3			; aux - M	Em vez de estar a gastar mais registos poderíamos fazer AND r0, r0, r0 para não gastar mais registos
  38 0006 0D 40		beq if_end			; if (M == 0), logo flag Z = 1 ele salta para o final do programa 
  39 0008 90 B9		cmp r1, r3			; aux - m	
  40 000A 0B 40		beq if_end			; if (m == 0), logo flag Z = 1 ele salta para o final do programa
  41 000C 80 B8		cmp r0, r1			;compara M com m 
  42 000E 03 48		bhs while 			; caso ( M >= m ) ele vai para o while - faz menos iterações
  43 0010 03 B0		mov r3, r0			;tranferência de valores
  44 0012 80 B0		mov r0, r1
  45 0014 83 B0		mov r3, r1
  46           	
  47           	while:
  48 0016 B3 89		sub r3, r3, r3
  49 0018 B0 B8		cmp r3, r1
  50 001A 03 48		bhs while_end
  51 001C 22 80		add r2, r2, r0
  52 001E 91 A8		sub r1, r1, #1
  53 0020 FA 5B		b while
  54           	while_end:
  55           	
  56           	if_end:
  57 0022 FF 5B		b 	.	;branch para ele próprio de forma a terminar o programa, o ponto final é um offset que anda sempre a saltar para ele próprio
  58           	
  58           	
