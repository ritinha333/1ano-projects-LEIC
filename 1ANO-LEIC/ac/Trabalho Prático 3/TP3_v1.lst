P16 assembler v1.5 (Feb  9 2024)	c:\uni\LEIC 2 ANO\2semestre\AC\labs_code\Computer-Architecture-Class\Trabalho Pr·tico 3\TP3_v1.lst	Sat May 25 12:28:41 2024

Sections
Index   Name            Address   Size
0       .startup        0000      0012 18
1       .text           0012      0036 54
2       .data           0048      0008 8
3       .stack          0050      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      .startup
array                   LABEL     0048 72     .data
array_addr              LABEL     0046 70     .text
ARRAY_MASK              ABSOLUTE  0038 56     .startup
ARRAY_POS               ABSOLUTE  0003 3      .startup
INPORT_ADDRESS          ABSOLUTE  D000 53248  .startup
inport_read             LABEL     0026 38     .text
line#15                 LABEL     000C 12     .startup
line#9                  LABEL     0002 2      .startup
main                    LABEL     0012 18     .text
main_addr               LABEL     0010 16     .startup
main_loop               LABEL     0016 22     .text
OUTPORT_ADDRESS         ABSOLUTE  D000 53248  .startup
outport_write_HIGH      LABEL     003E 62     .text
outport_write_LOW       LABEL     0036 54     .text
outport_write_words     LABEL     002E 46     .text
STACK_SIZE              ABSOLUTE  0088 136    .data
stack_top               LABEL     0090 144    .stack
stack_top_addr          LABEL     000E 14     .startup

Code listing
   1           	/* SecÔøΩÔøΩo de arranque: cÔøΩdigo de inicializaÔøΩÔøΩo
   2           	 * 1. Estabelece vetores (entry point apÔøΩs reset e de interrupÔøΩÔøΩo)
   3           	 * 2. Inicia stack pointer
   4           	 * 3. Chama main
   5           	 * 4. RetÔøΩm a execu√ß√£o do CPU ap√≥s o retorno do main
   6           	 */
   7           		.section .startup	;c√≥digo de boostrap, sec√ß√£o de arranque
   8 0000 01 58		b		_start		
   9 0002 FF 5B		b 		.			;salto para a pr√≥pria instru√ß√£o, PC-2
  10           	_start:
  11 0004 4D 0C		ldr		sp, stack_top_addr	;iniciar o valor do stackpointer para o topo do stack, SP = mem[PC+8(4words)]
  12 0006 80 B7		mov		r0, pc				;colocar o valor do pc para o r0 
  13 0008 0E A2		add		lr, r0, #4			;Chamada do programcounter, passar para o linkregistor o valor ao qual o pc quer aceder
  14 000A 2F 0C		ldr		pc, main_addr		;aceder a essa posi√ß√£o
  15 000C FF 5B		b 		.	
  16           	stack_top_addr:
  17 000E 90 00		.word stack_top
  18           	main_addr:
  19 0010 12 00		.word	main
  20           		
  21           	/* Secc√ß√£o com c√≥digo aplicacional (programa)
  22           	 */
  23           	
  24          		.equ 	INPORT_ADDRESS, 	0xD000
  25          		.equ 	OUTPORT_ADDRESS, 	0xD000
  26          		.equ 	ARRAY_MASK, 		0x38
  27          		.equ	ARRAY_POS, 			0x03
  28           		
  29           		.text
  30           	
  31           	; Rotina:    main
  32           	; Descricao: Dependendo do valor presente dos bits 3 a 5 porto de entrada √© indexado um array em mem√≥ria ao qual 
  33           	;			 se obtem um valor que √© escrito no porto de sa√≠da.
  34           	; Entradas:  -
  35           	; Saidas:  -
  36           	; Efeitos:
  37           	main: 
  38 0012 00 60		mov		r0, #0				; R0 = 0
  39 0014 0C 5C		bl 		outport_write_words	; recebe R0 e coloca o valor de r0 no Outport 0..15
  40           	main_loop:
  41 0016 07 5C	    bl      inport_read         ; L√™ os bits do porto de entrada
  42 0018 81 63	    mov     r1, #ARRAY_MASK     ; Coloca o valor de m√°scara(0x38 --> bits 3 a 5) em r1
  43 001A 80 C0		and		r0, r0, r1			; Seleciona os bits que queremos analisar, para isso faz-se um and e um lsr, para estarem localizados nos bits de menor peso.
  44 001C 80 E9		lsr		r0, r0, #ARRAY_POS	; De modo que estejam localizados nos bits de menor peso.
  45 001E 31 0D	    ldr     r1, array_addr      ; Carrega o valor da vari√°vel array_addr para r1
  46 0020 10 18	    ldrb    r0, [r1, r0]        ; Dependendo do valor
  47 0022 0D 5C	    bl      outport_write_HIGH  ; Escreve o valor de r0 na parte alta do porto de sa√≠da
  48 0024 F8 5B	    b       main_loop
  49           	
  50           	
  51           	
  52           	; Rotina:    inport_read
  53           	; Descricao: L√™ do porto de entrada o valor l√° presente e coloca-o num registo (byte-wise)
  54           	; Entradas:  -
  55           	; Saidas:    r0 - Byte lido do porto de entrada
  56           	; Efeitos:   r1 - Colocou r1 todo a 0xFFFF
  57           	
  58           	inport_read:
  59 0026 01 60		mov		r1, #INPORT_ADDRESS & 0xFF
  60 0028 01 7D		movt	r1, #INPORT_ADDRESS >> 8 & 0xFF
  61 002A 90 08		ldrb 	r0, [r1, #1]
  62 002C 0F B7		mov		pc, lr
  63           	
  64           	; Rotina:    outport_write_words
  65           	; Descricao: De acordo uma valor espec√≠fico escreve uma word no porto de sa√≠da (word-wise)
  66           	; Entradas:  r0 - valor a escrever no porto
  67           	; Saidas:    -
  68           	; Efeitos:   r1 - Colocou r1 todo a 0xFFFF
  69           	
  70           	outport_write_words:
  71 002E 01 60		mov		r1, #OUTPORT_ADDRESS & 0xFF
  72 0030 01 7D		movt	r1, #OUTPORT_ADDRESS >> 8 & 0xFF
  73 0032 10 20		str		r0, [r1, #0]
  74 0034 0F B7		mov		pc, lr
  75           	
  76           	; Rotina:    outport_write_LOW
  77           	; Descricao: De acordo uma valor presente em r0, escreve um byte na parte baixa do porto de sa√≠da (indexado em endere√ßos par)
  78           	; Entradas:  r0 - valor a escrever no porto
  79           	; Saidas:    -
  80           	; Efeitos:   r1 - Colocou r1 todo a 0xFFFF
  81           	
  82           	outport_write_LOW:
  83 0036 01 60		mov		r1, #OUTPORT_ADDRESS & 0xFF
  84 0038 01 7D		movt	r1, #OUTPORT_ADDRESS >> 8 & 0xFF
  85 003A 10 28		strb	r0, [r1, #0]
  86 003C 0F B7		mov		pc, lr
  87           	
  88           	; Rotina:    outport_write_HIGH
  89           	; Descricao: De acordo uma valor presente em r0, escreve um byte na parte alta do porto de sa√≠da (indexado em endere√ßos √≠mpar)
  90           	; Entradas:  r0 - valor a escrever no porto
  91           	; Saidas:    -
  92           	; Efeitos:   r1 - Colocou r1 todo a 0xFFFF
  93           	
  94           	outport_write_HIGH:
  95 003E 01 60		mov		r1, #OUTPORT_ADDRESS & 0xFF
  96 0040 01 7D		movt	r1, #OUTPORT_ADDRESS >> 8 & 0xFF
  97 0042 90 28		strb	r0, [r1, #1]
  98 0044 0F B7		mov		pc, lr			
  99           	
 100           	array_addr:
 101 0046 48 00	    .word array
 102           	
 103           	/* Dados globais do programa iniciados e n√£o iniciadas(s√≥ precisam de alocar espa√ßo)
 104           	 */ 
 105           		.data
 106           	
 107           	array:
 108          	    .byte 1, 2, 4, 8, 16, 32, 64, 128
 108 0048 01 02 04 08 10 20 40 80
 109           		
 110           	/* Stack: pilha com dados tempor√°rios
 111           	 */
 112          		.equ STACK_SIZE, 64
 113           		.section .stack
 114 0050 00   		.space STACK_SIZE
 114 .... ..
 114 008F 00
 115           	stack_top:
 115           	
