P16 assembler v1.5 (Feb  9 2024)	c:\Users\gonca\OneDrive\Documentos\Licenciatura\Arquitetura_de_Computadores\SV_23_24\labs\ComputerArchProj\TP3\lab05.lst	Wed May 15 14:19:20 2024

Sections
Index   Name            Address   Size
0       startup         0000      0014 20
1       .text           0014      00D4 212
2       .data           00E8      000C 12
3       .stack          00F4      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      startup
array                   LABEL     00EC 236    .data
array_addr              LABEL     00E6 230    .text
ARRAY_MASK              ABSOLUTE  0007 7      startup
ARRAY_POS               ABSOLUTE  0003 3      startup
BLINK_TIME              ABSOLUTE  0005 5      startup
CPSR_BIT_I              ABSOLUTE  0010 16     startup
delay                   LABEL     0036 54     .text
delay_end               LABEL     004A 74     .text
delay_loop              LABEL     0042 66     .text
inport_addr             LABEL     0082 130    .text
INPORT_ADDRESS          ABSOLUTE  FF80 65408  startup
inport_read             LABEL     007C 124    .text
isr                     LABEL     0050 80     .text
isr_addr                LABEL     0012 18     startup
LED0_MASK               ABSOLUTE  0001 1      startup
line#60                 LABEL     000C 12     startup
main                    LABEL     0014 20     .text
main_addr               LABEL     0010 16     startup
main_loop               LABEL     0024 36     .text
outport_addr            LABEL     00B4 180    .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  startup
outport_clear_bits      LABEL     0092 146    .text
outport_img             LABEL     00E8 232    .data
outport_img_addr        LABEL     00AC 172    .text
outport_init            LABEL     00A2 162    .text
OUTPORT_INIT_VAL        ABSOLUTE  0000 0      startup
outport_set_bits        LABEL     0084 132    .text
outport_write           LABEL     00AE 174    .text
PTC_ADDR                LABEL     00E4 228    .text
PTC_ADDRESS             ABSOLUTE  FF40 65344  startup
ptc_clr_irq             LABEL     00DE 222    .text
PTC_CMD_START           ABSOLUTE  0000 0      startup
PTC_CMD_STOP            ABSOLUTE  0001 1      startup
ptc_get_value           LABEL     00D8 216    .text
ptc_init                LABEL     00B6 182    .text
ptc_start               LABEL     00C8 200    .text
ptc_stop                LABEL     00D0 208    .text
PTC_TC                  ABSOLUTE  0004 4      startup
PTC_TCR                 ABSOLUTE  0000 0      startup
PTC_TIR                 ABSOLUTE  0006 6      startup
PTC_TMR                 ABSOLUTE  0002 2      startup
STACK_SIZE              ABSOLUTE  0040 64     startup
stack_top               LABEL     0134 308    .stack
stack_top_addr          LABEL     000E 14     startup
sysclk                  LABEL     00EA 234    .data
sysclk_addr             LABEL     007A 122    .text
SYSCLK_FREQ             ABSOLUTE  0063 99     startup
sysclk_get_ticks        LABEL     0074 116    .text
sysclk_init             LABEL     0068 104    .text

Code listing
   1           	; Ficheiro:  ap05.S
   2           	; Descricao: Programa de suporte a realizacao da 5a atividade laboratorial de
   3           	;            Arquitetura de Computadores.
   4           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   5           	; Data:      03-05-2024
   6           	
   7           	; Definicao dos valores dos simbolos utilizados no programa
   8           	;
   9          		.equ	CPSR_BIT_I, 0b010000          ; Mascara para o bit I do registo CPSR
  10           	
  11          		.equ	STACK_SIZE, 64                ; Dimensao do stack - 64 B
  12           	
  13           		; Definicoes do porto de entrada
  14          		.equ	INPORT_ADDRESS, 0xFF80        ; Endereco do porto de entrada
  15           	
  16           		; Definicoes do porto de saida
  17          		.equ	OUTPORT_ADDRESS, 0xFFC0       ; Endereco do porto de saida
  18           	
  19          		.equ	OUTPORT_INIT_VAL, 0           ; Valor inicial do porto de saida
  20           	
  21           		; Definicoes do circuito pTC
  22           	; *** Inicio de troco para completar ***
  23          		.equ	PTC_ADDRESS,  0xFF40          ; Endereco do circuito pTC
  24           	; *** Fim de troco para completar ***
  25           	
  26          		.equ	PTC_TCR, 0                    ; Deslocamento do registo TCR do pTC
  27          		.equ	PTC_TMR, 2                    ; Deslocamento do registo TMR do pTC
  28          		.equ	PTC_TC,  4                    ; Deslocamento do registo TC do pTC
  29          		.equ	PTC_TIR, 6                    ; Deslocamento do registo TIR do pTC
  30           	
  31          		.equ	PTC_CMD_START, 0              ; Comando para iniciar a contagem no pTC
  32          		.equ	PTC_CMD_STOP, 1               ; Comando para parar a contagem no pTC
  33           	
  34           	; *** Inicio de troco para completar ***
  35          		.equ	SYSCLK_FREQ, 0x63             ; Módulo 99 - Intervalo de contagem do circuito pTC
  36           	                                          ; que suporta a implementação do sysclk
  37           	; *** Fim de troco para completar ***
  38           	
  39           		; Outras definicoes
  40          		.equ	LED0_MASK, 1                  ; Mascara para o LED O0 da placa SDP16
  41           	
  42           	; *** Inicio de troco para completar ***
  43          		.equ	BLINK_TIME, 5                 ; ??
  44          		.equ	ARRAY_MASK, 0x07
  45          		.equ	ARRAY_POS, 0x03
  46           	
  47           	; *** Fim de troco para completar ***
  48           	
  49           	; Seccao:    startup
  50           	; Descricao: Guarda o código de arranque do sistema
  51           	;
  52           		.section startup
  53 0000 01 58		b	_start
  54 0002 7F 0C		ldr	pc, isr_addr
  55           	_start:
  56 0004 4D 0C		ldr	sp, stack_top_addr
  57 0006 80 B7	    mov r0, pc
  58 0008 0E A2	    add lr, r0, #4
  59 000A 2F 0C		ldr	pc, main_addr
  60 000C FF 5B	    b   .
  61           	
  62           	stack_top_addr:
  63 000E 34 01		.word	stack_top
  64           	main_addr:
  65 0010 14 00		.word	main
  66           	isr_addr:
  67 0012 50 00		.word	isr
  68           	
  69           	; Seccao:    text
  70           	; Descricao: Guarda o código do programa
  71           	;
  72           		.text
  73           	
  74           	; Rotina:    main
  75           	; Descricao: *** Para completar ***
  76           	; Entradas:  -
  77           	; Saidas:    -
  78           	; Efeitos:   *** Para completar ***
  79           	main:
  80 0014 00 60		mov		r0, #OUTPORT_INIT_VAL
  81 0016 45 5C		bl		outport_init
  82 0018 30 66		mov		r0, #SYSCLK_FREQ
  83 001A 26 5C		bl		sysclk_init
  84 001C 60 B0		mrs		r0, cpsr
  85 001E 01 61		mov		r1, #CPSR_BIT_I
  86 0020 80 C8		orr		r0, r0, r1
  87 0022 40 B0		msr		cpsr, r0
  88           		/*bl		inport_read
  89           		mov     r1, #ARRAY_MASK     ; Coloca o valor de máscara(0x38 --> bits 3 a 5) em r1
  90           		and		r0, r0, r1			; Seleciona os bits que queremos analisar, para isso faz-se um and e um lsr, para estarem localizados nos bits de menor peso.
  91           		lsr		r0, r0, #ARRAY_POS	
  92           		ldr     r1, array_addr      ; Carrega o valor da variável array_addr para r1
  93           	    ldrb    r0, [r1, r0]        ; Dependendo do valor
  94           		mov		#BLINK_TIME, r0
  95           		mov		r0, #LED0_MASK*/
  96           	main_loop:
  97 0024 10 60		mov		r0, #LED0_MASK
  98 0026 2E 5C		bl		outport_set_bits
  99           		;ror		r1, r0, #7
 100 0028 50 60		mov		r0, #BLINK_TIME
 101 002A 05 5C		bl		delay
 102 002C 10 60		mov		r0, #LED0_MASK
 103 002E 31 5C		bl		outport_clear_bits
 104 0030 50 60		mov		r0, #BLINK_TIME
 105 0032 01 5C		bl		delay
 106           		;mov		r0, r1
 107 0034 F7 5B		b		main_loop
 108           		
 109           	; Rotina:    delay
 110           	; Descricao: Rotina bloqueante que realiza uma espera por teste sucessivo
 111           	;            do valor da variável global sysclk. O tempo a esperar, em
 112           	;            centenas de milissegundos, e passado em R0.
 113           	;            Interface exemplo: void delay( uint16_t hms );
 114           	; Entradas:  *** Para completar ***
 115           	; Saidas:    -
 116           	; Efeitos:   -
 117           	delay:
 118           	; *** Inicio de troco para completar ***
 119 0036 0E 24		push	lr
 120 0038 04 24		push	r4							; O tempo a esperar 
 121 003A 05 24		push 	r5							; Valor do TC de referência
 122 003C 04 B0		mov		r4, r0
 123 003E 1A 5C		bl		sysclk_get_ticks			; Ir buscar referência
 124 0040 05 B0		mov		r5, r0
 125           	delay_loop:
 126 0042 18 5C		bl		sysclk_get_ticks			; Pulsos correntes
 127 0044 80 8A		sub		r0, r0, r5					; Verifica a diferença entre os ticks correntes e a referência inicial
 128 0046 00 BA		cmp 	r0, r4
 129 0048 FC 4F		blo		delay_loop
 130           	delay_end:
 131 004A 05 04		pop		r5
 132 004C 04 04		pop		r4
 133 004E 0F 04		pop		pc
 134           	
 135           	; *** Fim de troco para completar ***
 136           	
 137           	
 138           	; Rotina:    isr
 139           	; Descricao: Incrementa o valor da variável global sysclk.
 140           	; Entradas:  -
 141           	; Saidas:    -
 142           	; Efeitos:   *** Para completar ***
 143           	isr:
 144           	; *** Inicio de troco para completar ***
 145 0050 0E 24		push 	lr
 146 0052 00 24		push 	r0
 147 0054 01 24		push 	r1
 148 0056 11 0D		ldr		r1, sysclk_addr
 149 0058 10 00		ldr		r0, [r1]
 150 005A 80 A0		add		r0, r0, #1
 151 005C 10 20		str		r0, [r1]			; Incrementa o valor da variável global sysclk
 152 005E 3F 5C		bl  	ptc_clr_irq
 153 0060 01 04		pop		r1
 154 0062 00 04		pop		r0
 155 0064 0E 04		pop		lr
 156 0066 20 B0		movs 	pc, lr
 157           	; *** Fim de troco para completar ***
 158           	
 159           	
 160           	
 161           	; Rotina:    sysclk_init
 162           	; Descricao: Inicia uma nova contagem no periferico pTC com o intervalo de
 163           	;            contagem recebido em R0, em ticks, limpando eventuais pedidos de
 164           	;            interrupcao pendentes e iniciando com o valor zero a variavel
 165           	;            global sysclk.
 166           	;            Interface exemplo: void sysclk_init( uint8_t interval );
 167           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 168           	; Saidas:    -
 169           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 170           	;            eventuais pedidos de interrupcao pendentes e iniciando com o
 171           	;            valor zero a variavel global sysclk
 172           	sysclk_init:
 173           	; Recebe interval - passa ao ptc o intervalo, no ptc
 174 0068 0E 24		push 	lr
 175 006A 25 5C		bl		ptc_init			; Recebe em r0 o valor do intervalo (do módulo para o TMR) e inicia o pTC
 176 006C 00 60		mov		r0, #0
 177 006E 51 0C		ldr		r1, sysclk_addr		; Inicializa a variável em memória sysclk a zero
 178 0070 10 20		str		r0, [r1, #0]
 179 0072 0F 04		pop		pc
 180           	; *** Fim de troco para completar ***
 181           	
 182           	
 183           	
 184           	
 185           	
 186           	; Rotina:    sysclk_get_ticks
 187           	; Descricao: Devolve o valor corrente da variável global sysclk.
 188           	;            Interface exemplo: uint16_t sysclk_get_ticks ( );
 189           	; Entradas:  -
 190           	; Saidas:    *** Para completar ***
 191           	; Efeitos:   -
 192           	sysclk_get_ticks:
 193           	; ! *** Inicio de troco para completar ***
 194 0074 20 0C		ldr		r0, sysclk_addr
 195 0076 00 00		ldr		r0, [r0]
 196 0078 0F B7		mov		pc, lr
 197           	; *** Fim de troco para completar ***
 198           	
 199           	sysclk_addr:
 200 007A EA 00		.word	sysclk
 201           	
 202           	; Gestor de periférico para o porto de entrada
 203           	;
 204           	
 205           	; Rotina:    inport_read
 206           	; Descricao: Adquire e devolve o valor corrente do porto de entrada.
 207           	;            Interface exemplo: uint8_t inport_read( );
 208           	; Entradas:  -
 209           	; Saidas:    R0 - valor adquirido do porto de entrada
 210           	; Efeitos:   -
 211           	inport_read:
 212 007C 21 0C		ldr		r1, inport_addr
 213 007E 10 08		ldrb	r0, [r1, #0]
 214 0080 0F B7		mov		pc, lr
 215           	
 216           	inport_addr:
 217 0082 80 FF		.word	INPORT_ADDRESS
 218           	
 219           	; Gestor de periférico para o porto de saída
 220           	;
 221           	
 222           	; Rotina:    outport_set_bits
 223           	; Descricao: Atribui o valor logico 1 aos bits do porto de saida identificados
 224           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 225           	;            Interface exemplo: void outport_set_bits( uint8_t pins_mask );
 226           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 227           	; Saidas:    -
 228           	; Efeitos:   Altera o valor da variavel global outport_img.
 229           	outport_set_bits:
 230 0084 0E 24		push	lr
 231 0086 21 0D		ldr		r1, outport_img_addr
 232 0088 12 08		ldrb	r2, [r1, #0]
 233 008A 20 C8		orr		r0, r2, r0
 234 008C 10 28		strb	r0, [r1, #0]
 235 008E 0F 5C		bl		outport_write
 236 0090 0F 04		pop		pc
 237           	
 238           	; Rotina:    outport_clear_bits
 239           	; Descricao: Atribui o valor logico 0 aos bits do porto de saida identificados
 240           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 241           	;            Interface exemplo: void outport_clear_bits( uint8_t pins_mask );
 242           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 243           	; Saidas:    -
 244           	; Efeitos:   Altera o valor da variavel global outport_img.
 245           	outport_clear_bits:
 246 0092 0E 24		push	lr
 247 0094 B1 0C		ldr		r1, outport_img_addr
 248 0096 12 08		ldrb	r2, [r1, #0]
 249 0098 10 B0		mvn		r0, r0
 250 009A 20 C0		and		r0, r2, r0
 251 009C 10 28		strb	r0, [r1]
 252 009E 07 5C		bl		outport_write
 253 00A0 0F 04		pop		pc
 254           	
 255           	; Rotina:    outport_init
 256           	; Descricao: Faz a iniciacao do porto de saida, nele estabelecendo o valor
 257           	;            recebido em R0.
 258           	;            Interface exemplo: void outport_init( uint8_t value );
 259           	; Entradas:  R0 - Valor a atribuir ao porto de saida.
 260           	; Saidas:    -
 261           	; Efeitos:   Altera o valor da variavel global outport_img.
 262           	outport_init:
 263 00A2 0E 24		push	lr
 264 00A4 31 0C		ldr		r1, outport_img_addr
 265 00A6 10 28		strb	r0, [r1]
 266 00A8 02 5C		bl		outport_write
 267 00AA 0F 04		pop		pc
 268           	
 269           	outport_img_addr:
 270 00AC E8 00		.word	outport_img
 271           	
 272           	; Rotina:    outport_write
 273           	; Descricao: Escreve no porto de saida o valor recebido em R0.
 274           	;            Interface exemplo: void outport_write( uint8_t value );
 275           	; Entradas:  R0 - valor a atribuir ao porto de saida.
 276           	; Saidas:    -
 277           	; Efeitos:   -
 278           	outport_write:
 279 00AE 21 0C		ldr	r1, outport_addr
 280 00B0 10 28		strb	r0, [r1, #0]
 281 00B2 0F B7		mov	pc, lr
 282           	
 283           	outport_addr:
 284 00B4 C0 FF		.word	OUTPORT_ADDRESS
 285           	
 286           	; Gestor de periférico para o Pico Timer/Counter (pTC)
 287           	;
 288           	
 289           	; Rotina:    ptc_init
 290           	; Descricao: Faz a iniciacao do periférico pTC, habilitando o seu funcionamento
 291           	;            em modo continuo e com o intervalo de contagem recebido em R0, em
 292           	;            ticks.
 293           	;            Interface exemplo: void ptc_init( uint8_t interval );
 294           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 295           	; Saidas:    -
 296           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 297           	;            o pedido de interrupcao eventualmente pendente.
 298           	ptc_init:
 299 00B6 0E 24	    push    lr
 300 00B8 51 0D		ldr		r1, PTC_ADDR
 301 00BA 12 60		mov		r2, #PTC_CMD_STOP
 302 00BC 12 28		strb	r2, [r1, #PTC_TCR]
 303 00BE 10 29		strb	r0, [r1, #PTC_TMR]
 304 00C0 0E 5C	    bl  	ptc_clr_irq
 305 00C2 02 60		mov		r2, #PTC_CMD_START
 306 00C4 12 28		strb	r2, [r1, #PTC_TCR]
 307 00C6 0F 04		pop 	pc
 308           	
 309           	; Rotina:    ptc_start
 310           	; Descricao: Habilita a contagem no periferico pTC.
 311           	;            Interface exemplo: void ptc_start( );
 312           	; Entradas:  -
 313           	; Saidas:    -
 314           	; Efeitos:   -
 315           	ptc_start:
 316 00C8 D0 0C		ldr		r0, PTC_ADDR
 317 00CA 01 60		mov		r1, #PTC_CMD_START
 318 00CC 01 28		strb	r1, [r0, #PTC_TCR]
 319 00CE 0F B7		mov		pc, lr
 320           	
 321           	; Rotina:    ptc_stop
 322           	; Descricao: Para a contagem no periferico pTC.
 323           	;            Interface exemplo: void ptc_stop( );
 324           	; Entradas:  -
 325           	; Saidas:    -
 326           	; Efeitos:   O valor do registo TC do periferico e colocado a zero.
 327           	ptc_stop:
 328 00D0 90 0C		ldr		r0, PTC_ADDR
 329 00D2 11 60		mov		r1, #PTC_CMD_STOP
 330 00D4 01 28		strb	r1, [r0, #PTC_TCR]
 331 00D6 0F B7		mov		pc, lr
 332           	
 333           	; Rotina:    ptc_get_value
 334           	; Descricao: Devolve o valor corrente da contagem do periferico pTC.
 335           	;            Interface exemplo: uint8_t ptc_get_value( );
 336           	; Entradas:  -
 337           	; Saidas:    R0 - O valor corrente do registo TC do periferico.
 338           	; Efeitos:   -
 339           	ptc_get_value:
 340 00D8 51 0C		ldr		r1, PTC_ADDR
 341 00DA 10 0A		ldrb	r0, [r1, #PTC_TC]
 342 00DC 0F B7		mov		pc, lr
 343           	
 344           	; Rotina:    ptc_clr_irq
 345           	; Descricao: Sinaliza o periferico pTC que foi atendido um pedido de
 346           	;            interrupção.
 347           	;            Interface exemplo: void ptc_clr_irq( );
 348           	; Entradas:  -
 349           	; Saidas:    -
 350           	; Efeitos:   -
 351           	ptc_clr_irq:
 352 00DE 20 0C		ldr		r0, PTC_ADDR
 353 00E0 01 2B		strb	r1, [r0, #PTC_TIR]
 354 00E2 0F B7		mov		pc, lr
 355           	
 356           	PTC_ADDR:
 357 00E4 40 FF		.word	PTC_ADDRESS
 358           	
 359           	array_addr:
 360 00E6 EC 00		.word	array
 361           	
 362           	; Seccao:    data
 363           	; Descricao: Guarda as variáveis globais
 364           	;
 365           		.data
 366           	outport_img:
 367 00E8 00   		.space	1
 368           	
 369 00E9 00  		.align
 370           	sysclk:
 371 00EA 00   		.space	2
 371 00EB 00
 372           	
 373           	array:
 374          	    .byte 5, 10, 15, 20, 25, 30, 35, 40
 374 00EC 05 0A 0F 14 19 1E 23 28
 375           	
 376           	; Seccao:    stack
 377           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 378           	;
 379           		.stack
 380 00F4 00   		.space	STACK_SIZE
 380 .... ..
 380 0133 00
 381           	stack_top:
 381           	
