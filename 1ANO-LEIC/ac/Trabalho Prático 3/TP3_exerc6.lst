P16 assembler v1.5 (Feb  9 2024)	TP3_exerc6.lst	Tue May 07 15:15:08 2024

Sections
Index   Name            Address   Size
0       .startup        0000      0012 18
1       .text           0012      0050 80
2       .data           6000      0008 8
3       .stack          6008      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      .startup
array                   LABEL     6000 24576  .data
array_addr              LABEL     0060 96     .text
ARRAY_MASK              ABSOLUTE  0038 56     .startup
ARRAY_POS               ABSOLUTE  0003 3      .startup
handle_writes           LABEL     0030 48     .text
INPORT_ADDRESS          ABSOLUTE  D000 53248  .startup
inport_read             LABEL     0028 40     .text
line#15                 LABEL     000C 12     .startup
line#9                  LABEL     0002 2      .startup
loop                    LABEL     0016 22     .text
main                    LABEL     0012 18     .text
main_addr               LABEL     0010 16     .startup
OUTPORT_ADDRESS         ABSOLUTE  D000 53248  .startup
OUTPORT_SEL_MASK        ABSOLUTE  0003 3      .startup
outport_write_HIGH      LABEL     0058 88     .text
outport_write_LOW       LABEL     0048 72     .text
outport_write_words     LABEL     0050 80     .text
STACK_SIZE              ABSOLUTE  6040 24640  .data
stack_top               LABEL     6048 24648  .stack
stack_top_addr          LABEL     000E 14     .startup

Code listing
   1           	/* Sec��o de arranque: c�digo de inicializa��o
   2           	 * 1. Estabelece vetores (entry point ap�s reset e de interrup��o)
   3           	 * 2. Inicia stack pointer
   4           	 * 3. Chama main
   5           	 * 4. Ret�m a execução do CPU após o retorno do main
   6           	 */
   7           		.section .startup	;código de boostrap, secção de arranque
   8 0000 01 58		b		_start		
   9 0002 FF 5B		b 		.			;salto para a própria instrução, PC-2
  10           	_start:
  11 0004 4D 0C		ldr		sp, stack_top_addr	;iniciar o valor do stackpointer para o topo do stack, SP = mem[PC+8(4words)]
  12 0006 80 B7		mov		r0, pc				;colocar o valor do pc para o r0 
  13 0008 0E A2		add		lr, r0, #4			;Chamada do programcounter, passar para o linkregistor o valor ao qual o pc quer aceder
  14 000A 2F 0C		ldr		pc, main_addr		;aceder a essa posição
  15 000C FF 5B		b 		.	
  16           	stack_top_addr:
  17 000E 48 60		.word stack_top
  18           	main_addr:
  19 0010 12 00		.word	main
  20           		
  21           	/* Seccção com código aplicacional (programa)
  22           	 */
  23           	
  24          		.equ 	INPORT_ADDRESS, 	0xD000
  25          		.equ 	OUTPORT_ADDRESS, 	0xD000
  26          		.equ 	ARRAY_MASK, 		0x38
  27          		.equ	ARRAY_POS, 			0x03
  28          		.equ	OUTPORT_SEL_MASK, 	0x03
  29           		
  30           		.text
  31           	
  32           	main:
  33 0012 00 60		mov		r0, #0
  34 0014 1D 5C		bl 		outport_write_words
  35           	loop:
  36 0016 08 5C	    bl      inport_read         ; Lê os bits do porto de entrada
  37 0018 02 B0		mov		r2, r0
  38 001A 81 63	    mov     r1, #ARRAY_MASK     ; --------------------------
  39 001C 80 C0		and		r0, r0, r1			; Seleciona os bits de 3 a 5
  40 001E 80 E9		lsr		r0, r0, #ARRAY_POS	; --------------------------
  41 0020 F1 0D	    ldr     r1, array_addr      ; Carrega o valor da variável array_addr para r1
  42 0022 10 18	    ldrb    r0, [r1, r0]        ; Dependendo do valor
  43 0024 05 5C		bl		handle_writes
  44 0026 F7 5B		b       loop
  45           	
  46           	
  47           	
  48           	; Rotina:    inport_read
  49           	; Descricao: Lê do porto de entrada o valor lá presente e coloca-o num registo
  50           	; Entradas:  -
  51           	; Saidas:    r0 - Byte lido do porto de entrada
  52           	; Efeitos:   r1 - Colocou r1 todo a 0xFFFF
  53           	inport_read:
  54 0028 01 60		mov		r1, #INPORT_ADDRESS & 0xFF
  55 002A 01 7D		movt	r1, #INPORT_ADDRESS >> 8 & 0xFF
  56 002C 90 08		ldrb 	r0, [r1, #1]
  57 002E 0F B7		mov		pc, lr
  58           	
  59           	; Rotina:    outport_write
  60           	; Descricao: De acordo uma valor específico escreve um byte no porto de saída
  61           	; Entradas:  r0 - valor a escrever no porto
  62           	; Saidas:    -
  63           	; Efeitos:   r1 - Colocou r1 todo a 0xFFF
  64           	
  65           	handle_writes:
  66 0030 0E 24		push lr
  67 0032 31 60		mov     r1, #OUTPORT_SEL_MASK     	; --------------------------
  68 0034 A2 C0		and		r2, r2, r1					; Seleciona os bits de 0 a 1
  69 0036 23 60		mov		r3, #2
  70 0038 A0 B9		cmp 	r2, r3
  71 003A 0A 40		beq		outport_write_words
  72 003C 33 60		mov		r3, #3
  73 003E A0 B9		cmp		r2, r3
  74 0040 07 40		beq		outport_write_words
  75 0042 13 60		mov		r3, #1
  76 0044 A0 B9		cmp 	r2, r3
  77 0046 08 40		beq		outport_write_HIGH
  78           	outport_write_LOW:
  79 0048 01 60		mov		r1, #OUTPORT_ADDRESS & 0xFF
  80 004A 01 7D		movt	r1, #OUTPORT_ADDRESS >> 8 & 0xFF
  81 004C 10 28		strb	r0, [r1, #0]
  82 004E 0F 04		pop 	pc
  83           	outport_write_words:
  84 0050 01 60		mov		r1, #OUTPORT_ADDRESS & 0xFF
  85 0052 01 7D		movt	r1, #OUTPORT_ADDRESS >> 8 & 0xFF
  86 0054 10 20		str		r0, [r1, #0]
  87 0056 0F 04		pop 	pc
  88           	outport_write_HIGH:
  89 0058 01 60		mov		r1, #OUTPORT_ADDRESS & 0xFF
  90 005A 01 7D		movt	r1, #OUTPORT_ADDRESS >> 8 & 0xFF
  91 005C 90 28		strb	r0, [r1, #1]
  92 005E 0F 04		pop 	pc		
  93           	array_addr:
  94 0060 00 60	    .word array
  95           	
  96           	/* Dados globais do programa iniciados e não iniciadas(só precisam de alocar espaço)
  97           	 */ 
  98           		.data
  99           	
 100           	array:
 101          	    .byte 1, 2, 4, 8, 16, 32, 64, 128
 101 6000 01 02 04 08 10 20 40 80
 102           		
 103           	/* Stack: pilha com dados temporários
 104           	 */
 105          		.equ STACK_SIZE, 64
 106           		.section .stack
 107 6008 00   		.space STACK_SIZE
 107 .... ..
 107 6047 00
 108           	stack_top:
 108           	
